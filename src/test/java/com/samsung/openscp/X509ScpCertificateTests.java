/*!
 * Copyright 2025 Samsung Electronics Co, Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.samsung.openscp;

import org.junit.jupiter.api.Test;

import java.security.cert.CertificateException;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class X509ScpCertificateTests {
    private static final byte[] PUBLIC_KEY = BytesUtils.hexToBytes(
        "3059301306072A8648CE3D020106082A8648CE3D030107034200044F92A07D168C309959EED99E288381DD192979CD452D8FBE1F" +
        "163447979207C5E6CD1F4DD11609E2100C033BBD723BE78B71477E64883EB41EC366713E44AF1E");

    @Test
    void positive() throws CertificateException {
        final byte[] certificateBytes = BytesUtils.hexToBytes(
            "3082028A30820230A003020102021457F0A28A1F2ADCFF7D22239B8B644AE287422DD6300A06082A8648CE3D0403023061310B30" +
            "09060355040613024B52310B300906035504080C0253553120301E060355040A0C1753616D73756E6720456C656374726F6E6963" +
            "7320436F2E3123302106035504030C1A526F6F7420434120436572746966696361746520285445535429301E170D323431323231" +
            "3131303533365A170D3236303332333131303533365A305C310B3009060355040613024B52310B300906035504080C0253553120" +
            "301E060355040A0C1753616D73756E6720456C656374726F6E69637320436F2E311E301C06035504030C15534420436572746966" +
            "6963617465202854455354293059301306072A8648CE3D020106082A8648CE3D030107034200044F92A07D168C309959EED99E28" +
            "8381DD192979CD452D8FBE1F163447979207C5E6CD1F4DD11609E2100C033BBD723BE78B71477E64883EB41EC366713E44AF1EA3" +
            "81CA3081C7301F0603551D23041830168014851A6F60A6B45534647260877A357F3676C35686301D0603551D0E04160414CD7B89" +
            "7E3C1BC6FFAC7F9595FB55AE66C3CE84AB300E0603551D0F0101FF040403020308301E0603551D120417301581136578616D706C" +
            "65406578616D706C652E636F6D30150603551D250101FF040B3009060728818C5D050102303E0603551D1F043730353033A031A0" +
            "2F862D68747470733A2F2F696E7465726F706576656E742E73707275636569642E636F6D2F696E7465726F702E63726C300A0608" +
            "2A8648CE3D0403020348003045022100CABC2AAEBF030A2BDB026D09AE4B0376D50E2E0ED7126BEAF7B186D45D3D5FE9022004A6" +
            "C7200436F467E5B078C2EEAEAAB3079D7026A1D577B26BCD5222E7B87EC7");
        final X509ScpCertificate certificate = X509ScpCertificate.parse(certificateBytes);
        assertArrayEquals(certificateBytes, certificate.getEncoded());
        assertArrayEquals(PUBLIC_KEY, certificate.getPublicKey().getEncoded());
    }
}
