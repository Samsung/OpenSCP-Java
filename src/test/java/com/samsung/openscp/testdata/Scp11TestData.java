/*!
 * Copyright 2025 Samsung Electronics Co, Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.samsung.openscp.testdata;

import com.samsung.openscp.BytesUtils;


public final class Scp11TestData {
    public static final byte OCE_KID = 0x10;

    // NIST P-256 keys
    public static final byte[] X509_CERT_OCE_ECKA_P256 = BytesUtils.hexToBytes(
        "30820211308201B6A00302010202146DBC19AFE3782C7C0053F19E86DF2F0F00B559EA300A06082A8648CE3D0403023051310B30" +
        "09060355040613024B52310B300906035504080C0253553110300E060355040A0C0753616D73756E673123302106035504030C1A" +
        "43412D4B4C4F4320436572746966696361746520285445535429301E170D3235303230363130323135365A170D32363035303931" +
        "30323135365A304D310B3009060355040613024B52310B300906035504080C0253553110300E060355040A0C0753616D73756E67" +
        "311F301D06035504030C164F4345204365727469666963617465202854455354293059301306072A8648CE3D020106082A8648CE" +
        "3D03010703420004B5C2598092609EFEFBA7A2FBED2F6E9142CA3882E7DE69D47D29476E7F0CE85077480CAC6AD5C156CE459F25" +
        "92DA0EECDCB0DE2E8F112C9E49C4655A11C59620A370306E301D0603551D0E04160414E225C62F5E33CA02D23D9D83D0685B4EB2" +
        "FEBC11301F0603551D23041830168014851A6F60A6B45534647260877A357F3676C35686300E0603551D0F0101FF040403020308" +
        "301C0603551D200101FF04123010300E060C2A864886FC6B64000A020100300A06082A8648CE3D0403020349003046022100A0D2" +
        "76B639EE863758B5568ADFA9D3B7F3D906A557C4C7675607FC82A9596EC6022100D7044BDE4CB536055CF93D5C7FCF5C7C5298EB" +
        "1D4646357CE6515BC0CD9E10FF");
    public static final byte[] GP_CERT_OCE_ECKA_P256 = BytesUtils.hexToBytes(
        "7F2181E193146DBC19AFE3782C7C0053F19E86DF2F0F00B559EA4214851A6F60A6B45534647260877A357F3676C356865F2014E2" +
        "25C62F5E33CA02D23D9D83D0685B4EB2FEBC11950200805F2404141C0C1F7F4946B04104B5C2598092609EFEFBA7A2FBED2F6E91" +
        "42CA3882E7DE69D47D29476E7F0CE85077480CAC6AD5C156CE459F2592DA0EECDCB0DE2E8F112C9E49C4655A11C59620F001005F" +
        "3747304502210085941BB4C425EC62AFAFEC6C47BDF5481744F76D76D1BB71FF9353DCA2ED381E0220572584095E48FFC54589A8" +
        "8923CC9FB24F6380388C9BC6BE004A7E7368244DCB");
    // SK.OCE.ECKA test key in its primary encoding format
    public static final byte[] SK_OCE_ECKA_P256 = BytesUtils.hexToBytes(
        "308187020100301306072A8648CE3D020106082A8648CE3D030107046D306B0201010420A5116B848D41BD93737F187ABC03886B" +
        "F7A80422D150025109C6749F45BB9B6DA14403420004B5C2598092609EFEFBA7A2FBED2F6E9142CA3882E7DE69D47D29476E7F0C" +
        "E85077480CAC6AD5C156CE459F2592DA0EECDCB0DE2E8F112C9E49C4655A11C59620");
    // ePK.OCE.ECKA test ephemeral public key in its primary encoding format
    public static final byte[] EPK_OCE_ECKA_P256 = BytesUtils.hexToBytes(
        "3059301306072A8648CE3D020106082A8648CE3D0301070342000470B0BD7863E90E32DA5401188354D1F41999442FDFDCBA7472" +
        "B7F1E5DBBF8A32F92D9D4F9D55C60D57D39BD6D7973306CEA55F7A86884096651A9CCAC8239C92");
    // eSK.OCE.ECKA test ephemeral private key in its primary encoding format
    public static final byte[] ESK_OCE_ECKA_P256 = BytesUtils.hexToBytes(
        "3041020100301306072A8648CE3D020106082A8648CE3D030107042730250201010420B69D2D4A2544B5938ED3C4F6319810837E" +
        "4DBBEFF115BD9955607E8CDBBBACE5");

    // NIST P-384 keys
    public static final byte[] CERT_OCE_ECKA_P384 = BytesUtils.hexToBytes(
        "3082022D308201D3A00302010202146DBC19AFE3782C7C0053F19E86DF2F0F00B559EB300A06082A8648CE3D0403023051310B30" +
        "09060355040613024B52310B300906035504080C0253553110300E060355040A0C0753616D73756E673123302106035504030C1A" +
        "43412D4B4C4F4320436572746966696361746520285445535429301E170D3235303230363130323533315A170D32363035303931" +
        "30323533315A304D310B3009060355040613024B52310B300906035504080C0253553110300E060355040A0C0753616D73756E67" +
        "311F301D06035504030C164F4345204365727469666963617465202854455354293076301006072A8648CE3D020106052B810400" +
        "2203620004D15482162AF5C1D5309305A4D9A546FFFA63D06673D2F630E373EA2D708C401BC4DA04BEE856E0920E31725E538768" +
        "BFE8BAD146B3C4E568176605AC056AF296CA7AB1157A2D7EEAC935DEF2CB4DDA60EA7A8534C0EA5F270FF8F7FEAA533ADCA37030" +
        "6E301D0603551D0E04160414C2FC731974645E6544C2C09526C19E83BF15E3B8301F0603551D23041830168014851A6F60A6B455" +
        "34647260877A357F3676C35686300E0603551D0F0101FF040403020308301C0603551D200101FF04123010300E060C2A864886FC" +
        "6B64000A020100300A06082A8648CE3D0403020348003045022100FABE472813E09475AB90442A940F91E76D429CD207CB638BDB" +
        "ECF8DD1CA0893E02204713EE6AC34526331830A2F50020BCBDBFCC70238A87EFA027F935A0B63848E9");
    // SK.OCE.ECKA test key in its primary encoding format
    public static final byte[] SK_OCE_ECKA_P384 = BytesUtils.hexToBytes(
        "3081B6020100301006072A8648CE3D020106052B8104002204819E30819B020101043077DF94B51840300D76B7F67ACD7FC4E258" +
        "2DC1516AF64E0F41D267431B6C8CCEF3E77373A0C2A08B98C69E04F84E734BA16403620004D15482162AF5C1D5309305A4D9A546" +
        "FFFA63D06673D2F630E373EA2D708C401BC4DA04BEE856E0920E31725E538768BFE8BAD146B3C4E568176605AC056AF296CA7AB1" +
        "157A2D7EEAC935DEF2CB4DDA60EA7A8534C0EA5F270FF8F7FEAA533ADC");
    // ePK.OCE.ECKA test ephemeral public key in its primary encoding format
    public static final byte[] EPK_OCE_ECKA_P384 = BytesUtils.hexToBytes(
        "3076301006072A8648CE3D020106052B81040022036200040F1CE002390591146ADD42431658340901B353554AA2B55BC04E2881" +
        "CD7C304FEC19F8FD335B203AA38D87CDA384BFD55BD8E74125570C706A9529D58985B830329AEA7D1E134F6C3AD070C5710ACF4C" +
        "993E17E5083F6EDE516CD5BA42938BD2");
    // eSK.OCE.ECKA test ephemeral private key in its primary encoding format
    public static final byte[] ESK_OCE_ECKA_P384 = BytesUtils.hexToBytes(
        "3081B6020100301006072A8648CE3D020106052B8104002204819E30819B02010104303AAC19DDC038D1E72505408655A12D3B23" +
        "AE40F6DE1EDE601841ECA661B73FB5E04228FC06B189D2A51C4A32882D80C1A164036200040F1CE002390591146ADD4243165834" +
        "0901B353554AA2B55BC04E2881CD7C304FEC19F8FD335B203AA38D87CDA384BFD55BD8E74125570C706A9529D58985B830329AEA" +
        "7D1E134F6C3AD070C5710ACF4C993E17E5083F6EDE516CD5BA42938BD2");

    // BP 256 keys
    public static final byte[] CERT_OCE_ECKA_BP256 = BytesUtils.hexToBytes(
        "30820212308201B7A00302010202146DBC19AFE3782C7C0053F19E86DF2F0F00B559ED300A06082A8648CE3D0403023051310B30" +
        "09060355040613024B52310B300906035504080C0253553110300E060355040A0C0753616D73756E673123302106035504030C1A" +
        "43412D4B4C4F4320436572746966696361746520285445535429301E170D3235303230363132343933305A170D32363035303931" +
        "32343933305A304D310B3009060355040613024B52310B300906035504080C0253553110300E060355040A0C0753616D73756E67" +
        "311F301D06035504030C164F434520436572746966696361746520285445535429305A301406072A8648CE3D020106092B240303" +
        "0208010107034200041541CB264CEC2167362C72F5E56CDB8C207E41497A7554365CFD41A3555B3B2262CA52190F391D64CB36D9" +
        "0D9953D952D69FAD3E03042C9585F45C290CB93A41A370306E301D0603551D0E041604141C5B1CB1F89C1060006A491D0B6A837B" +
        "60557AC5301F0603551D23041830168014851A6F60A6B45534647260877A357F3676C35686300E0603551D0F0101FF0404030203" +
        "08301C0603551D200101FF04123010300E060C2A864886FC6B64000A020100300A06082A8648CE3D040302034900304602210097" +
        "80538C919021E9370D277741FA905552D225A08F1A4E5B2DC75C835747BCA9022100B0FE5E59980AE7E2EC694D73D325E6FA2C86" +
        "048C2C56E08F5E7D6606A14C79F5");
    // SK.OCE.ECKA test key in its primary encoding format
    public static final byte[] SK_OCE_ECKA_BP256 = BytesUtils.hexToBytes(
        "308188020100301406072A8648CE3D020106092B2403030208010107046D306B020101042010D47C1D413543E12E409F36301B91" +
        "0A94B7DA3FEFF538D8D1B36DFA54736B7DA144034200041541CB264CEC2167362C72F5E56CDB8C207E41497A7554365CFD41A355" +
        "5B3B2262CA52190F391D64CB36D90D9953D952D69FAD3E03042C9585F45C290CB93A41");
    // ePK.OCE.ECKA test ephemeral public key in its primary encoding format
    public static final byte[] EPK_OCE_ECKA_BP256 = BytesUtils.hexToBytes(
        "305A301406072A8648CE3D020106092B2403030208010107034200044749018DF858D406449A711A3A3F6AEDF26C11D110178635" +
        "E2C818698EAD6D8C846F6E1096D18D189CC61FE4B018D783542E8173B4C034787738B09B05840022");
    // eSK.OCE.ECKA test ephemeral private key in its primary encoding format
    public static final byte[] ESK_OCE_ECKA_BP256 = BytesUtils.hexToBytes(
        "308188020100301406072A8648CE3D020106092B2403030208010107046D306B020101042017D44C613A517C4611AC634CDEDE9D" +
        "FFAE443502D5F934637782F2ADD74A85CCA144034200044749018DF858D406449A711A3A3F6AEDF26C11D110178635E2C818698E" +
        "AD6D8C846F6E1096D18D189CC61FE4B018D783542E8173B4C034787738B09B05840022");
}
